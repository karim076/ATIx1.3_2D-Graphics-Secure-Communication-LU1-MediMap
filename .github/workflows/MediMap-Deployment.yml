name: üöÄ Build, Test & Deploy .NET Core WebApi to Azure App Service

env:
  ARTIFACT_NAME: WebApi
  DOTNET_CORE_VERSION: 9.0
  PUBLISH_DIRECTORY: "./out/publish"

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  check-secrets:
    name: üîç Check Secrets
    runs-on: ubuntu-latest
    steps:
      - name: "Check if AZURE_WEBAPP_NAME secret exists"
        env: 
          super_secret: ${{ secrets.AZURE_WEBAPP_NAME }}
        if: ${{ env.super_secret == '' }}
        run: 'echo "AZURE_WEBAPP_NAME secret missing!"; exit 1;'

      - name: "Check if AZURE_WEBAPP_PUBLISH_PASSWORD secret exists"
        env: 
          super_secret: ${{ secrets.AZURE_WEBAPP_PUBLISH_PASSWORD }}
        if: ${{ env.super_secret == '' }}
        run: 'echo "AZURE_WEBAPP_PUBLISH_PASSWORD secret missing!"; exit 1;'

      - name: "Check if AZURE_WEBAPP_PUBLISH_USERNAME secret exists"
        env: 
          super_secret: ${{ secrets.AZURE_WEBAPP_PUBLISH_USERNAME }}
        if: ${{ env.super_secret == '' }}
        run: 'echo "AZURE_WEBAPP_PUBLISH_USERNAME secret missing!"; exit 1;'

      - name: "Check if WEBAPI_PROJECT_NAME secret exists"
        env: 
          super_secret: ${{ secrets.WEBAPI_PROJECT_NAME }}
        if: ${{ env.super_secret == '' }}
        run: 'echo "WEBAPI_PROJECT_NAME secret missing!"; exit 1;'

  build:
    name: üèóÔ∏è Build & Test .NET API
    runs-on: ubuntu-latest
    needs: check-secrets
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ./MediMapAPI/MediMapAPI.sln
      
      - name: Build
        run: dotnet build --no-restore ./MediMapAPI/MediMapAPI.sln
    
      - name: Run .NET Tests üß™
        run: dotnet test --no-build --verbosity normal ./MediMapAPI/MediMapUnitTest/MediMapUnitTest.csproj
    
      - name: Publish
        run: dotnet publish ./MediMapAPI/MediMapAPI.sln --output ${{ env.PUBLISH_DIRECTORY }} --configuration Release 
    
      - name: Upload Artifacts üì¶
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.PUBLISH_DIRECTORY }}

  unity-tests:
    name: üéÆ Run Unity Tests
    runs-on: ubuntu-latest
    needs: check-secrets
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Unity Tests üß™
        uses: game-ci/unity-test-runner@v2
        with:
          unityVersion: 2020.3.29f1
          projectPath: ./HiveSpace
          testMode: editmode
          artifactsPath: ./unity-test-results
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

      - name: Upload Unity Test Results üìä
        uses: actions/upload-artifact@v4
        with:
          name: unity-test-results
          path: ./unity-test-results

  deploy:
    name: üöÄ Deploy to Azure
    runs-on: ubuntu-latest
    needs: [build,unity-tests] # Ensure both build & Unity tests pass
    steps:
      - name: Check Commit Message for "noAzure"
        id: check_commit
        run: |
          if git log -1 --pretty=%B | grep -iq "noAzure"; then
            echo "Skipping deployment due to 'noAzure' keyword in commit message."
            echo "skip_deploy=true" >> $GITHUB_ENV
          else
            echo "skip_deploy=false" >> $GITHUB_ENV
          fi

      - name: Download Artifact üì•
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.PUBLISH_DIRECTORY }}

      - name: Deploy to Azure App Service ‚òÅÔ∏è
        if: env.skip_deploy == 'false'
        uses: azure/webapps-deploy@v3
        with: 
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          publish-profile: <publishData><publishProfile profileName="${{secrets.AZURE_WEBAPP_NAME}} - Zip Deploy" publishMethod="ZipDeploy" publishUrl="${{ secrets.AZURE_WEBAPP_NAME }}.scm.azurewebsites.net:443" userName="${{ secrets.AZURE_WEBAPP_PUBLISH_USERNAME }}" userPWD="${{ secrets.AZURE_WEBAPP_PUBLISH_PASSWORD }}" destinationAppUrl="http://${{ secrets.AZURE_WEBAPP_NAME }}.azurewebsites.net" SQLServerDBConnectionString="" mySQLDBConnectionString="" hostingProviderForumLink="" controlPanelLink="https://portal.azure.com" webSystem="WebSites"><databases /></publishProfile></publishData>
          package: '${{ env.PUBLISH_DIRECTORY}}'
